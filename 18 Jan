#include <stdio.h>
#include <stdlib.h>


struct node
{
	int info;
	struct node *prev, *next;
};
struct node* start = NULL;

void beg_insert()
{
	int data;
	struct node* temp;

	temp = (struct node*)malloc(sizeof(struct node));
	printf("\nEnter number to be inserted: ");
	scanf("%d", &data);
	temp->info = data;
	temp->prev = NULL;
	temp->next = start;
	start = temp;
}

void end_insert()
{
	int data;
	struct node *temp, *trav;
	temp = (struct node*)malloc(sizeof(struct node));
	temp->prev = NULL;
	temp->next = NULL;
	printf("\nEnter number to be inserted: ");
	scanf("%d", &data);
	temp->info = data;
	temp->next = NULL;
	trav = start;

	if (start == NULL)
    {

		start = temp;
	}
	else
    {
		while (trav->next != NULL)
		{
		    trav = trav->next;
		}
		temp->prev = trav;
		trav->next = temp;
	}
}

void random_insert()
{
	int data, pos, i = 1;
	struct node *temp, *newnode;
	newnode = malloc(sizeof(struct node));
	newnode->next = NULL;
	newnode->prev = NULL;

	printf("\nEnter position : ");
	scanf("%d", &pos);


	if (start == NULL)
    {
		start = newnode;
		newnode->prev = NULL;
		newnode->next = NULL;
	}
	else if (pos == 1)
	{
        beg_insert();
	}
	else
	{
        printf("\nEnter number to be inserted: ");
        scanf("%d", &data);
        newnode->info = data;
        temp = start;
		while (i < pos - 1)
		{
			temp = temp->next;
			i++;
		}
		newnode->next = temp->next;
		newnode->prev = temp;
		temp->next = newnode;
		temp->next->prev = newnode;
	}
}

void beg_delete()
{
	struct node* temp;
	if (start == NULL)
		printf("\nList is empty\n");
	else
    {
		temp = start;
		start = start->next;
		if (start != NULL)
		{
		    start->prev = NULL;
		}
		free(temp);
	}
}

void end_delete()
{
	struct node* temp;
	if (start == NULL)
    {
        printf("\nList is empty\n");
    }
	temp = start;
	while (temp->next != NULL)
    {
        temp = temp->next;
    }
	if (start->next == NULL)
    {
        start = NULL;
    }
	else
    {
		temp->prev->next = NULL;
		free(temp);
	}
}

void random_delete()
{
	int pos, i = 1;
	struct node *temp, *position;
	temp = start;

	if (start == NULL)
    {
        		printf("\nList is empty\n");
    }
	else
    {
		printf("\nEnter position : ");
		scanf("%d", &pos);

		if (pos == 1) {
			beg_delete();
			if (start != NULL) {
				start->prev = NULL;
			}
			free(position);
			return;
		}

		while (i < pos - 1) {
			temp = temp->next;
			i++;
		}
		position = temp->next;
		if (position->next != NULL)
			position->next->prev = temp;
		temp->next = position->next;

		free(position);
	}
}


void display()
{
	if (start == NULL)
    {
		printf("\nList is empty\n");
		return;
	}
	struct node* temp;
	temp = start;
	while (temp != NULL)
    {
		printf("Data = %d\n", temp->info);
		temp = temp->next;
	}
}

void search()
{
    struct node *head = NULL;
    struct node *ptr;
    int item, i = 0, flag;
    ptr = head;
    if(ptr == NULL)
    {
        printf("\n List is empty \n");
    }
    else
    {
        printf("\n Enter item to search \n");
        scanf("%d", &item);
        while(ptr != NULL)
        {
            if(ptr->data == item)
            {
                printf("\n Location of item is %d", i+1);
                flag=0;
                break;
            }
            else
            {
                flag=1;
            }
            i++;
            ptr = ptr->next;
        }
        if(flag == 1)
        {
            printf("\n Item not found\n");
        }
    }
}

int main()
{
	int choice;
	while (1) {
        printf("MENU");
		printf("\n1. Insert in Beginning \n2. Insert at end \n3. Insert randomly \n4. Delete in beginning \n5. Delete at end \n6. Delete randomly \n7. Display \n8. Search \n9. Exit ");
        printf("Enter you choice ");
		scanf("%d", &choice);

		switch (choice) {
		case 1:
		    {
		      beg_insert();
                break;
		    }
		case 2:
		    {
                end_insert();
                break;
		    }
		case 3:
		    {
		       random_insert();
               break;
		    }
		case 4:
		    {
		        beg_delete();
		        break;
		    }
		case 5:
		    {
		        end_delete();
		        break;
		    }
		case 6:
		    {
		        random_delete();
		        break;
		    }
		case 7:
		    {
		        display();
		        break;
		    }
        case 8:
            {
                search();
                break;
            }
        case 9:
            {
                exit(1);
                break;
            }
		default:
			printf("Enter valid choice. \n");
		}
	}
	return 0;
}
