//Write a program 
//a) To construct a binary Search tree. 
//b) To traverse the tree using all the methods i.e., in-order, pre-order and post order 
//c) To display the elements in the tree.



#include <stdio.h>
#include <stdlib.h>


typedef struct Node
{
    struct Node *left;
    int data;
    struct Node *right;
}*node;

node getnode(int item)
{
    node temp = (node)malloc(sizeof(struct Node));
    temp->left = NULL;
    temp-> data = item;
    temp-> right = NULL;
    return temp;
}

node insert(node root, int ele)
{
    if(root == NULL)
    {
        return getnode(ele);
    }
    else if (ele < root -> data)
    {
        root->left = insert(root->left,ele);
    }
    else if(ele > root-> data)
    {
        root->right = insert(root-> right, ele);
    }
    return root;
}

void inorder(node root)
{
    if(root == NULL)
    {
        return;
    }
    inorder(root-> left);
    printf("%d", root->data);
    inorder(root->right);
}

void preorder(node root)
{
    if(root == NULL)
    {
        return;
    }
    printf("%d", root -> data);
    preorder(root->left);
    preorder(root->right);
}

void postorder(node root)
{
    if(root == NULL)
    {
        return;
    }
    preorder(root->left);
    preorder(root->right);
    printf("%d", root->data);
}


int main()
{
    node root = NULL;
    int element, choice=1;
    while(choice != 5)
    {
        printf("\n MENU \n");
        printf("\n1. Insert \n2. Inorder \n3. Preorder \n4. Postorder \n5. Exit");
        scanf("%d", &choice);
        printf("\n Choose an option \n");
        switch(choice)
        {
            case 1:
            {
                printf("Enter element to insert");
                scanf("%d", &element);
                root= insert(root, element);
                break;
            }
            case 2:
            {
                inorder(root);
                break;
            }
            case 3:
            {
                preorder(root);
            }
            case 4:
            {
                postorder(root);
            }
            case 5:
            {
                exit(1);
            }
            default:
            printf("Invalid input");
            
        }
    }
}

